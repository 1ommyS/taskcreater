<?phpnamespace App\Repositories\Implementations;use App\Enums\Roles;use App\Models\Group;use App\Models\Kicked;use App\Models\StudentGroups;use App\Models\User;use App\Repositories\Interfaces\IStudentRepository;use \Illuminate\Http\Request;use Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\DB;class StudentRepository implements IStudentRepository{    public function kickStudents ($request, $group_id)    {        foreach ( $request->users as $user ) {            $this->kickStudent($user, $group_id);            Kicked::create([                'student_id' => $user,                'group_name' => Group::where('id', $group_id)->first()->name_group,            ]);            $user = User::find($user);            $user->finished = 1;            $user->save();        }    }    public function getFreeStudents ($group_id)    {        return DB::select("SELECT name, id FROM users WHERE id NOT IN (SELECT student_id FROM student_groups WHERE group_id = ?) AND role_id = ?", [$group_id, Roles::STUDENT]);    }    public function getStudentIdByGroupId ($group_id)    {        return DB::table('student_groups')->select('student_id')->where('group_id', $group_id)->get();    }    public function saveStudent (int $student_id, Request $request_data): void    {        $user = User::find($student_id);        $user->name = $request_data->name;        $user->login = $request_data->login;        $user->password = hash('sha3-256', $request_data->password);        $user->city = $request_data->city;        $user->phone_student = $request_data->phone_student;        $user->phone_parent = $request_data->phone_parent;        $user->birthday = $request_data->birthday;        $user->link_vk = $request_data->link_vk;        $user->parent_vk = $request_data->parent_vk;        $user->age = $request_data->age;        $user->sex = $request_data->sex;        if ( !$request_data->get_message ) $user->get_message = 0;        else $user->get_message = 1;        $user->save();    }    /**     * @param $user     * @param $group_id     */    private function kickStudent ($user, $group_id): void    {        StudentGroups::where([            [                'student_id',                $user            ],            [                'group_id',                $group_id            ]        ])->delete();    }}